{"ast":null,"code":"\"use strict\";\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar findValue = require(\"find-value\"),\n    setValue = require(\"set-value\"),\n    rJson = require(\"r-json\"),\n    fs = require(\"fs\"),\n    iterateObject = require(\"iterate-object\"),\n    os = require('os');\n\nvar JsonEditor = function () {\n  /**\n   * JsonEditor\n   *\n   * @name JsonEditor\n   * @function\n   * @param {String} path The path to the JSON file.\n   * @param {Object} options An object containing the following fields:\n   *\n   *  - `stringify_width` (Number): The JSON stringify indent width (default: `2`).\n   *  - `stringify_fn` (Function): A function used by `JSON.stringify`.\n   *  - `stringify_eol` (Boolean): Wheter to add the new line at the end of the file or not (default: `false`)\n   *  - `ignore_dots` (Boolean): Wheter to use the path including dots or have an object structure (default: `false`)\n   *  - `autosave` (Boolean): Save the file when setting some data in it.\n   *\n   * @returns {JsonEditor} The `JsonEditor` instance.\n   */\n  function JsonEditor(path, options) {\n    _classCallCheck(this, JsonEditor);\n\n    this.options = options = options || {};\n    options.stringify_width = options.stringify_width || 2;\n    options.stringify_fn = options.stringify_fn || null;\n    options.stringify_eol = options.stringify_eol || false;\n    options.ignore_dots = options.ignore_dots || false;\n    this.path = path;\n    this.data = this.read();\n  }\n  /**\n   * set\n   * Set a value in a specific path.\n   *\n   * @name set\n   * @function\n   * @param {String} path The object path.\n   * @param {Anything} value The value.\n   * @returns {JsonEditor} The `JsonEditor` instance.\n   */\n\n\n  _createClass(JsonEditor, [{\n    key: \"set\",\n    value: function set(path, value) {\n      var _this = this;\n\n      if ((typeof path === \"undefined\" ? \"undefined\" : _typeof(path)) === \"object\") {\n        iterateObject(path, function (val, n) {\n          setValue(_this.data, n, val);\n        });\n      } else if (this.options.ignore_dots) {\n        this.data[path] = value;\n      } else {\n        setValue(this.data, path, value);\n      }\n\n      if (this.options.autosave) {\n        this.save();\n      }\n\n      return this;\n    }\n    /**\n     * get\n     * Get a value in a specific path.\n     *\n     * @name get\n     * @function\n     * @param {String} path\n     * @returns {Value} The object path value.\n     */\n\n  }, {\n    key: \"get\",\n    value: function get(path) {\n      if (path) {\n        if (this.options.ignore_dots) {\n          return this.data[path];\n        }\n\n        return findValue(this.data, path);\n      }\n\n      return this.toObject();\n    }\n    /**\n     * unset\n     * Remove a path from a JSON object.\n     *\n     * @name unset\n     * @function\n     * @param {String} path The object path.\n     * @returns {JsonEditor} The `JsonEditor` instance.\n     */\n\n  }, {\n    key: \"unset\",\n    value: function unset(path) {\n      return this.set(path, undefined);\n    }\n    /**\n     * append\n     * Appends a value/object to a specific path.\n     * If the path is empty it wil create a list.\n     *\n     * @name append\n     * @function\n     * @param {String} path The object path.\n     * @param {Anything} value The value.\n     * @returns {JsonEditor} The `JsonEditor` instance.\n     */\n\n  }, {\n    key: \"append\",\n    value: function append(path, value) {\n      var data = this.get(path);\n      data = data === undefined ? [] : data;\n      if (!Array.isArray(data)) throw new Error(\"The data is not an array!\");\n      data.push(value);\n      this.set(path, data);\n      return this;\n    }\n    /**\n     * pop\n     * Pop an array from a specific path.\n     *\n     * @name append\n     * @function\n     * @param {String} path The object path.\n     * @returns {JsonEditor} The `JsonEditor` instance.\n     */\n\n  }, {\n    key: \"pop\",\n    value: function pop(path) {\n      var data = this.get(path);\n      if (!Array.isArray(data)) throw new Error('The data is not an array!');\n      data.pop();\n      this.set(path, data);\n      return this;\n    }\n    /**\n     * read\n     * Read the JSON file.\n     *\n     * @name read\n     * @function\n     * @param {Function} cb An optional callback function which will turn the function into an asynchronous one.\n     * @returns {Object} The object parsed as object or an empty object by default.\n     */\n\n  }, {\n    key: \"read\",\n    value: function read(cb) {\n      if (!cb) {\n        try {\n          return rJson(this.path);\n        } catch (e) {\n          return {};\n        }\n      }\n\n      rJson(this.path, function (err, data) {\n        data = err ? {} : data;\n        cb(null, data);\n      });\n    }\n    /**\n     * write\n     * Write the JSON file.\n     *\n     * @name read\n     * @function\n     * @param {String} The file content.\n     * @param {Function} cb An optional callback function which will turn the function into an asynchronous one.\n     * @returns {JsonEditor} The `JsonEditor` instance.\n     */\n\n  }, {\n    key: \"write\",\n    value: function write(content, cb) {\n      if (cb) {\n        fs.writeFile(this.path, content, cb);\n      } else {\n        fs.writeFileSync(this.path, content);\n      }\n\n      return this;\n    }\n    /**\n     * empty\n     * Empty the JSON file content.\n     *\n     * @name empty\n     * @function\n     * @param {Function} cb The callback function.\n     */\n\n  }, {\n    key: \"empty\",\n    value: function empty(cb) {\n      return this.write(\"{}\", cb);\n    }\n    /**\n     * save\n     * Save the file back to disk.\n     *\n     * @name save\n     * @function\n     * @param {Function} cb An optional callback function which will turn the function into an asynchronous one.\n     * @returns {JsonEditor} The `JsonEditor` instance.\n     */\n\n  }, {\n    key: \"save\",\n    value: function save(cb) {\n      var data = JSON.stringify(this.data, this.options.stringify_fn, this.options.stringify_width, this.options.stringify_eol);\n      this.write(this.options.stringify_eol ? data + os.EOL : data, cb);\n      return this;\n    }\n    /**\n     * toObject\n     *\n     * @name toObject\n     * @function\n     * @returns {Object} The data object.\n     */\n\n  }, {\n    key: \"toObject\",\n    value: function toObject() {\n      return this.data;\n    }\n  }]);\n\n  return JsonEditor;\n}();\n/**\n * editJsonFile\n * Edit a json file.\n *\n * @name editJsonFile\n * @function\n * @param {String} path The path to the JSON file.\n * @param {Object} options An object containing the following fields:\n * @return {JsonEditor} The `JsonEditor` instance.\n */\n\n\nmodule.exports = function editJsonFile(path, options) {\n  return new JsonEditor(path, options);\n};","map":{"version":3,"sources":["D:/meher/Bureau/Projet_trading-main/node_modules/edit-json-file/lib/index.js"],"names":["_typeof","Symbol","iterator","obj","constructor","prototype","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","Constructor","protoProps","staticProps","_classCallCheck","instance","TypeError","findValue","require","setValue","rJson","fs","iterateObject","os","JsonEditor","path","options","stringify_width","stringify_fn","stringify_eol","ignore_dots","data","read","value","set","_this","val","n","autosave","save","get","toObject","unset","undefined","append","Array","isArray","Error","push","pop","cb","e","err","write","content","writeFile","writeFileSync","empty","JSON","stringify","EOL","module","exports","editJsonFile"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar findValue = require(\"find-value\"),\n    setValue = require(\"set-value\"),\n    rJson = require(\"r-json\"),\n    fs = require(\"fs\"),\n    iterateObject = require(\"iterate-object\"),\n    os = require('os');\n\nvar JsonEditor = function () {\n\n    /**\n     * JsonEditor\n     *\n     * @name JsonEditor\n     * @function\n     * @param {String} path The path to the JSON file.\n     * @param {Object} options An object containing the following fields:\n     *\n     *  - `stringify_width` (Number): The JSON stringify indent width (default: `2`).\n     *  - `stringify_fn` (Function): A function used by `JSON.stringify`.\n     *  - `stringify_eol` (Boolean): Wheter to add the new line at the end of the file or not (default: `false`)\n     *  - `ignore_dots` (Boolean): Wheter to use the path including dots or have an object structure (default: `false`)\n     *  - `autosave` (Boolean): Save the file when setting some data in it.\n     *\n     * @returns {JsonEditor} The `JsonEditor` instance.\n     */\n    function JsonEditor(path, options) {\n        _classCallCheck(this, JsonEditor);\n\n        this.options = options = options || {};\n        options.stringify_width = options.stringify_width || 2;\n        options.stringify_fn = options.stringify_fn || null;\n        options.stringify_eol = options.stringify_eol || false;\n        options.ignore_dots = options.ignore_dots || false;\n        this.path = path;\n        this.data = this.read();\n    }\n\n    /**\n     * set\n     * Set a value in a specific path.\n     *\n     * @name set\n     * @function\n     * @param {String} path The object path.\n     * @param {Anything} value The value.\n     * @returns {JsonEditor} The `JsonEditor` instance.\n     */\n\n\n    _createClass(JsonEditor, [{\n        key: \"set\",\n        value: function set(path, value) {\n            var _this = this;\n\n            if ((typeof path === \"undefined\" ? \"undefined\" : _typeof(path)) === \"object\") {\n                iterateObject(path, function (val, n) {\n                    setValue(_this.data, n, val);\n                });\n            } else if (this.options.ignore_dots) {\n                this.data[path] = value;\n            } else {\n                setValue(this.data, path, value);\n            }\n            if (this.options.autosave) {\n                this.save();\n            }\n            return this;\n        }\n\n        /**\n         * get\n         * Get a value in a specific path.\n         *\n         * @name get\n         * @function\n         * @param {String} path\n         * @returns {Value} The object path value.\n         */\n\n    }, {\n        key: \"get\",\n        value: function get(path) {\n            if (path) {\n                if (this.options.ignore_dots) {\n                    return this.data[path];\n                }\n                return findValue(this.data, path);\n            }\n            return this.toObject();\n        }\n\n        /**\n         * unset\n         * Remove a path from a JSON object.\n         *\n         * @name unset\n         * @function\n         * @param {String} path The object path.\n         * @returns {JsonEditor} The `JsonEditor` instance.\n         */\n\n    }, {\n        key: \"unset\",\n        value: function unset(path) {\n            return this.set(path, undefined);\n        }\n\n        /**\n         * append\n         * Appends a value/object to a specific path.\n         * If the path is empty it wil create a list.\n         *\n         * @name append\n         * @function\n         * @param {String} path The object path.\n         * @param {Anything} value The value.\n         * @returns {JsonEditor} The `JsonEditor` instance.\n         */\n\n    }, {\n        key: \"append\",\n        value: function append(path, value) {\n            var data = this.get(path);\n            data = data === undefined ? [] : data;\n            if (!Array.isArray(data)) throw new Error(\"The data is not an array!\");\n            data.push(value);\n            this.set(path, data);\n            return this;\n        }\n\n        /**\n         * pop\n         * Pop an array from a specific path.\n         *\n         * @name append\n         * @function\n         * @param {String} path The object path.\n         * @returns {JsonEditor} The `JsonEditor` instance.\n         */\n\n    }, {\n        key: \"pop\",\n        value: function pop(path) {\n            var data = this.get(path);\n            if (!Array.isArray(data)) throw new Error('The data is not an array!');\n            data.pop();\n            this.set(path, data);\n            return this;\n        }\n\n        /**\n         * read\n         * Read the JSON file.\n         *\n         * @name read\n         * @function\n         * @param {Function} cb An optional callback function which will turn the function into an asynchronous one.\n         * @returns {Object} The object parsed as object or an empty object by default.\n         */\n\n    }, {\n        key: \"read\",\n        value: function read(cb) {\n            if (!cb) {\n                try {\n                    return rJson(this.path);\n                } catch (e) {\n                    return {};\n                }\n            }\n            rJson(this.path, function (err, data) {\n                data = err ? {} : data;\n                cb(null, data);\n            });\n        }\n\n        /**\n         * write\n         * Write the JSON file.\n         *\n         * @name read\n         * @function\n         * @param {String} The file content.\n         * @param {Function} cb An optional callback function which will turn the function into an asynchronous one.\n         * @returns {JsonEditor} The `JsonEditor` instance.\n         */\n\n    }, {\n        key: \"write\",\n        value: function write(content, cb) {\n            if (cb) {\n                fs.writeFile(this.path, content, cb);\n            } else {\n                fs.writeFileSync(this.path, content);\n            }\n            return this;\n        }\n\n        /**\n         * empty\n         * Empty the JSON file content.\n         *\n         * @name empty\n         * @function\n         * @param {Function} cb The callback function.\n         */\n\n    }, {\n        key: \"empty\",\n        value: function empty(cb) {\n            return this.write(\"{}\", cb);\n        }\n\n        /**\n         * save\n         * Save the file back to disk.\n         *\n         * @name save\n         * @function\n         * @param {Function} cb An optional callback function which will turn the function into an asynchronous one.\n         * @returns {JsonEditor} The `JsonEditor` instance.\n         */\n\n    }, {\n        key: \"save\",\n        value: function save(cb) {\n            var data = JSON.stringify(this.data, this.options.stringify_fn, this.options.stringify_width, this.options.stringify_eol);\n            this.write(this.options.stringify_eol ? data + os.EOL : data, cb);\n            return this;\n        }\n\n        /**\n         * toObject\n         *\n         * @name toObject\n         * @function\n         * @returns {Object} The data object.\n         */\n\n    }, {\n        key: \"toObject\",\n        value: function toObject() {\n            return this.data;\n        }\n    }]);\n\n    return JsonEditor;\n}();\n\n/**\n * editJsonFile\n * Edit a json file.\n *\n * @name editJsonFile\n * @function\n * @param {String} path The path to the JSON file.\n * @param {Object} options An object containing the following fields:\n * @return {JsonEditor} The `JsonEditor` instance.\n */\n\n\nmodule.exports = function editJsonFile(path, options) {\n    return new JsonEditor(path, options);\n};"]},"metadata":{},"sourceType":"script"}